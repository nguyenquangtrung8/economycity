/**
 * optimize-images.js - T·ªëi ∆∞u h√≥a h√¨nh ·∫£nh cho d·ª± √°n Economy City
 * S·ª≠ d·ª•ng Sharp ƒë·ªÉ n√©n v√† chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh
 */

const fs = require('fs');
const path = require('path');
const sharp = require('sharp');
const chokidar = require('chokidar');

// ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c
const INPUT_DIR = path.join(__dirname, '../static/img');
const OUTPUT_DIR = path.join(__dirname, '../static/img-optimized');

// Parse arguments
const args = process.argv.slice(2);
const WATCH_MODE = args.includes('--watch') || args.includes('-w');

// H√†m ƒë·ªçc t·∫•t c·∫£ c√°c file h√¨nh ·∫£nh
function getAllImageFiles(dir) {
  let results = [];

  if (!fs.existsSync(dir)) {
    console.error(`‚ùå Th∆∞ m·ª•c ${dir} kh√¥ng t·ªìn t·∫°i!`);
    return results;
  }

  const items = fs.readdirSync(dir, { withFileTypes: true });

  for (const item of items) {
    const fullPath = path.join(dir, item.name);

    if (item.isDirectory()) {
      results = results.concat(getAllImageFiles(fullPath));
    } else if (/\.(jpg|jpeg|png|gif)$/i.test(item.name)) {
      results.push(fullPath);
    }
  }

  return results;
}

// X·ª≠ l√Ω m·ªôt h√¨nh ·∫£nh
async function processImage(imagePath) {
  // B·ªè qua n·∫øu l√† trong th∆∞ m·ª•c ƒë√£ t·ªëi ∆∞u
  if (imagePath.includes(OUTPUT_DIR)) {
    return;
  }

  // L·∫•y ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi so v·ªõi th∆∞ m·ª•c input
  const relativePath = path.relative(INPUT_DIR, imagePath);
  const outputDirectory = path.dirname(path.join(OUTPUT_DIR, relativePath));
  const fileName = path.parse(imagePath).name;
  const extension = path.parse(imagePath).ext.toLowerCase();

  // T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a t·ªìn t·∫°i
  if (!fs.existsSync(outputDirectory)) {
    fs.mkdirSync(outputDirectory, { recursive: true });
  }

  try {
    console.log(`üîÑ ƒêang x·ª≠ l√Ω: ${relativePath}`);

    // L·∫•y th√¥ng tin h√¨nh ·∫£nh
    const metadata = await sharp(imagePath).metadata();
    const fileSize = fs.statSync(imagePath).size; // L·∫•y k√≠ch th∆∞·ªõc file g·ªëc

    // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file ƒë·ªÉ kh√¥ng resize
    const MAX_FILE_SIZE = 3 * 1024 * 1024; // 3MB
    const shouldResizeBySize = fileSize > MAX_FILE_SIZE;

    // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc ·∫£nh ƒë·ªÉ kh√¥ng resize
    const maxWidth = 3840; // Gi·ªõi h·∫°n chi·ªÅu r·ªông t·ªëi ƒëa
    const maxHeight = 2560; // Gi·ªõi h·∫°n chi·ªÅu cao t·ªëi ƒëa
    const shouldResizeByDimensions = metadata.width > maxWidth || metadata.height > maxHeight;

    // Ch·ªâ resize n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file ho·∫∑c k√≠ch th∆∞·ªõc ·∫£nh
    const shouldResize = shouldResizeBySize || shouldResizeByDimensions;

    // 1. T·∫°o phi√™n b·∫£n WebP (n√©n t·ªët nh·∫•t cho web)
    await sharp(imagePath)
      // Resize n·∫øu qu√° l·ªõn (gi·ªØ nguy√™n t·ª∑ l·ªá)
      .resize({
        width: shouldResize ? maxWidth : null,
        height: shouldResize ? maxHeight : null,
        withoutEnlargement: true,
        fit: 'inside' // Gi·ªØ nguy√™n t·ª∑ l·ªá
      })
      // Chuy·ªÉn sang WebP v·ªõi ch·∫•t l∆∞·ª£ng t·ªët h∆°n
      .webp({
        quality: 85, // TƒÉng ch·∫•t l∆∞·ª£ng l√™n 85
        effort: 6,
        smartSubsample: true,
        reductionEffort: 6
      })
      // L∆∞u file
      .toFile(path.join(outputDirectory, `${fileName}.webp`));

    // 2. X·ª≠ l√Ω phi√™n b·∫£n n√©n c·ªßa file g·ªëc (d·ª± ph√≤ng cho tr√¨nh duy·ªát c≈©)
    if (extension === '.jpg' || extension === '.jpeg') {
      // N√©n JPEG
      await sharp(imagePath)
        .resize({
          width: shouldResize ? maxWidth : null,
          height: shouldResize ? maxHeight : null,
          withoutEnlargement: true,
          fit: 'inside'
        })
        .jpeg({
          quality: 90, // TƒÉng ch·∫•t l∆∞·ª£ng l√™n 90
          progressive: true,
          chromaSubsampling: '4:2:0',
          trellisQuantisation: true,
          overshootDeringing: true,
          optimizeScans: true
        })
        .toFile(path.join(outputDirectory, `${fileName}.jpg`));

    } else if (extension === '.png') {
      // N√©n PNG
      await sharp(imagePath)
        .resize({
          width: shouldResize ? maxWidth : null,
          height: shouldResize ? maxHeight : null,
          withoutEnlargement: true,
          fit: 'inside'
        })
        .png({
          progressive: true,
          compressionLevel: 9,
          adaptiveFiltering: true,
          palette: true
        })
        .toFile(path.join(outputDirectory, `${fileName}.png`));

    } else if (extension === '.gif') {
      // GIFs kh√¥ng ƒë∆∞·ª£c Sharp h·ªó tr·ª£ t·ªët ƒë·ªÉ t·ªëi ∆∞u, n√™n ch·ªâ copy
      fs.copyFileSync(imagePath, path.join(outputDirectory, path.basename(imagePath)));
    }

    // 3. T·∫°o placeholder cho lazy loading
    await sharp(imagePath)
      .resize(20)
      .blur(5)
      .toBuffer()
      .then(data => {
        const base64 = `data:image/jpeg;base64,${data.toString('base64')}`;
        fs.writeFileSync(path.join(outputDirectory, `${fileName}.placeholder.txt`), base64);
      });

    console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω: ${relativePath}`);

    // T√≠nh to√°n m·ª©c gi·∫£m k√≠ch th∆∞·ªõc
    const originalSize = fs.statSync(imagePath).size;
    const webpPath = path.join(outputDirectory, `${fileName}.webp`);

    if (fs.existsSync(webpPath)) {
      const webpSize = fs.statSync(webpPath).size;
      const compressionRatio = (1 - webpSize / originalSize) * 100;

      console.log(
        `üìä Gi·∫£m ${compressionRatio.toFixed(1)}% k√≠ch th∆∞·ªõc (WebP: ${formatFileSize(webpSize)} | G·ªëc: ${formatFileSize(originalSize)})`
      );
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω ${relativePath}:`, error.message);
  }
}

// ƒê·ªãnh d·∫°ng k√≠ch th∆∞·ªõc file
function formatFileSize(bytes) {
  if (bytes < 1024) return bytes + ' B';
  if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
  return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
}

// H√†m ch√≠nh
async function optimizeImages() {
  console.log('üîç ƒêang qu√©t t·∫•t c·∫£ h√¨nh ·∫£nh...');

  // T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true });
  }

  // L·∫•y t·∫•t c·∫£ file h√¨nh ·∫£nh
  const imageFiles = getAllImageFiles(INPUT_DIR);

  console.log(`üñºÔ∏è T√¨m th·∫•y ${imageFiles.length} h√¨nh ·∫£nh ƒë·ªÉ x·ª≠ l√Ω...`);

  // X·ª≠ l√Ω t·ª´ng h√¨nh ·∫£nh
  for (const imagePath of imageFiles) {
    await processImage(imagePath);
  }

  console.log('‚ú® Qu√° tr√¨nh t·ªëi ∆∞u h√≥a h√¨nh ·∫£nh ho√†n t·∫•t!');

  // N·∫øu ·ªü ch·∫ø ƒë·ªô theo d√µi, b·∫Øt ƒë·∫ßu chokidar
  if (WATCH_MODE) {
    startWatcher();
  }
}

// Kh·ªüi ƒë·ªông ch·∫ø ƒë·ªô theo d√µi file
function startWatcher() {
  console.log('üëÄ ƒêang theo d√µi thay ƒë·ªïi trong th∆∞ m·ª•c h√¨nh ·∫£nh...');

  // Theo d√µi t·∫•t c·∫£ h√¨nh ·∫£nh trong th∆∞ m·ª•c input
  const watcher = chokidar.watch(['**/*.jpg', '**/*.jpeg', '**/*.png', '**/*.gif'], {
    cwd: INPUT_DIR,
    ignoreInitial: true
  });

  // X·ª≠ l√Ω h√¨nh ·∫£nh khi c√≥ th√™m ho·∫∑c thay ƒë·ªïi
  watcher.on('add', filePath => {
    const fullPath = path.join(INPUT_DIR, filePath);
    console.log(`üÜï Ph√°t hi·ªán h√¨nh ·∫£nh m·ªõi: ${filePath}`);
    processImage(fullPath);
  });

  watcher.on('change', filePath => {
    const fullPath = path.join(INPUT_DIR, filePath);
    console.log(`üîÑ Ph√°t hi·ªán h√¨nh ·∫£nh thay ƒë·ªïi: ${filePath}`);
    processImage(fullPath);
  });

  console.log('üí° M·∫πo: Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng ch·∫ø ƒë·ªô theo d√µi');
}

// Ch·∫°y script
(async () => {
  try {
    // Ki·ªÉm tra Sharp ƒë√£ c√†i ƒë·∫∑t
    try {
      require.resolve('sharp');
    } catch (error) {
      console.error('‚ùå Sharp ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng ch·∫°y l·ªánh: npm install sharp --save-dev');
      process.exit(1);
    }

    // B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·ªëi ∆∞u h√≥a
    await optimizeImages();

    // Tho√°t n·∫øu kh√¥ng ·ªü ch·∫ø ƒë·ªô watch
    if (!WATCH_MODE) {
      process.exit(0);
    }
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
    process.exit(1);
  }
})();