/**
 * optimize-images.js - T·ªëi ∆∞u h√≥a h√¨nh ·∫£nh cho d·ª± √°n Economy City
 * T·ª± ƒë·ªông ch·∫°y khi build ho·∫∑c start d·ª± √°n
 * Ngu·ªìn: /static/imgbase -> ƒê√≠ch: /static/img
 * Chuy·ªÉn ƒë·ªïi t√™n file th√†nh kh√¥ng d·∫•u, kh√¥ng d·∫•u c√°ch
 * Ch·ªâ xu·∫•t ra ƒë·ªãnh d·∫°ng WebP
 */

const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

// ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c
const INPUT_DIR = path.join(__dirname, '../static/imgbase');
const OUTPUT_DIR = path.join(__dirname, '../static/img');

// H√†m chuy·ªÉn ƒë·ªïi ti·∫øng Vi·ªát c√≥ d·∫•u th√†nh kh√¥ng d·∫•u
function convertToNonAccentVietnamese(str) {
  str = str.toLowerCase();
  str = str.replace(/√†|√°|·∫°|·∫£|√£|√¢|·∫ß|·∫•|·∫≠|·∫©|·∫´|ƒÉ|·∫±|·∫Ø|·∫∑|·∫≥|·∫µ/g, "a");
  str = str.replace(/√®|√©|·∫π|·∫ª|·∫Ω|√™|·ªÅ|·∫ø|·ªá|·ªÉ|·ªÖ/g, "e");
  str = str.replace(/√¨|√≠|·ªã|·ªâ|ƒ©/g, "i");
  str = str.replace(/√≤|√≥|·ªç|·ªè|√µ|√¥|·ªì|·ªë|·ªô|·ªï|·ªó|∆°|·ªù|·ªõ|·ª£|·ªü|·ª°/g, "o");
  str = str.replace(/√π|√∫|·ª•|·ªß|≈©|∆∞|·ª´|·ª©|·ª±|·ª≠|·ªØ/g, "u");
  str = str.replace(/·ª≥|√Ω|·ªµ|·ª∑|·ªπ/g, "y");
  str = str.replace(/ƒë/g, "d");
  
  // X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát
  str = str.replace(/[^a-z0-9\s]/gi, "");
  
  // Thay th·∫ø d·∫•u c√°ch b·∫±ng d·∫•u g·∫°ch ngang
  str = str.replace(/\s+/g, "_");
  
  // X√≥a c√°c d·∫•u g·∫°ch ngang li√™n ti·∫øp
  str = str.replace(/-+/g, "-");
  
  // X√≥a d·∫•u g·∫°ch ngang ·ªü ƒë·∫ßu v√† cu·ªëi
  str = str.replace(/^-+|-+$/g, "");
  
  return str;
}

// H√†m ƒë·ªçc t·∫•t c·∫£ c√°c file h√¨nh ·∫£nh
function getAllImageFiles(dir) {
  let results = [];

  if (!fs.existsSync(dir)) {
    console.error(`‚ùå Th∆∞ m·ª•c ${dir} kh√¥ng t·ªìn t·∫°i!`);
    return results;
  }

  const items = fs.readdirSync(dir, { withFileTypes: true });

  for (const item of items) {
    const fullPath = path.join(dir, item.name);

    if (item.isDirectory()) {
      results = results.concat(getAllImageFiles(fullPath));
    } else if (/\.(jpg|jpeg|png|gif)$/i.test(item.name)) {
      results.push(fullPath);
    }
  }

  return results;
}

// X·ª≠ l√Ω m·ªôt h√¨nh ·∫£nh
async function processImage(imagePath) {
  // L·∫•y ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi so v·ªõi th∆∞ m·ª•c input
  const relativePath = path.relative(INPUT_DIR, imagePath);
  const outputDirectory = path.dirname(path.join(OUTPUT_DIR, relativePath));
  
  // Chuy·ªÉn ƒë·ªïi t√™n file th√†nh kh√¥ng d·∫•u, kh√¥ng d·∫•u c√°ch
  const originalFileName = path.parse(imagePath).name;
  const fileName = convertToNonAccentVietnamese(originalFileName);

  // T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a t·ªìn t·∫°i
  if (!fs.existsSync(outputDirectory)) {
    fs.mkdirSync(outputDirectory, { recursive: true });
  }

  try {
    console.log(`üîÑ ƒêang x·ª≠ l√Ω: ${relativePath}`);
    
    if (originalFileName !== fileName) {
      console.log(`‚úèÔ∏è T√™n file c≈©: "${originalFileName}" -> T√™n file m·ªõi: "${fileName}"`);
    }

    // L·∫•y th√¥ng tin h√¨nh ·∫£nh
    const metadata = await sharp(imagePath).metadata();
    const fileSize = fs.statSync(imagePath).size; // L·∫•y k√≠ch th∆∞·ªõc file g·ªëc

    // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file ƒë·ªÉ kh√¥ng resize
    const MAX_FILE_SIZE = 3 * 1024 * 1024; // 3MB
    const shouldResizeBySize = fileSize > MAX_FILE_SIZE;

    // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc ·∫£nh ƒë·ªÉ kh√¥ng resize
    const maxWidth = 3840; // Gi·ªõi h·∫°n chi·ªÅu r·ªông t·ªëi ƒëa
    const maxHeight = 2560; // Gi·ªõi h·∫°n chi·ªÅu cao t·ªëi ƒëa
    const shouldResizeByDimensions = metadata.width > maxWidth || metadata.height > maxHeight;

    // Ch·ªâ resize n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file ho·∫∑c k√≠ch th∆∞·ªõc ·∫£nh
    const shouldResize = shouldResizeBySize || shouldResizeByDimensions;

    // T·∫°o phi√™n b·∫£n WebP (n√©n t·ªët nh·∫•t cho web)
    const webpOutputPath = path.join(outputDirectory, `${fileName}.webp`);
    const webpFileExists = fs.existsSync(webpOutputPath);
    
    if (webpFileExists) {
      console.log(`‚ÑπÔ∏è Ghi ƒë√® file WebP hi·ªán c√≥: ${webpOutputPath}`);
    }
    
    await sharp(imagePath)
      // Resize n·∫øu qu√° l·ªõn (gi·ªØ nguy√™n t·ª∑ l·ªá)
      .resize({
        width: shouldResize ? maxWidth : null,
        height: shouldResize ? maxHeight : null,
        withoutEnlargement: true,
        fit: 'inside' // Gi·ªØ nguy√™n t·ª∑ l·ªá
      })
      // Chuy·ªÉn sang WebP v·ªõi ch·∫•t l∆∞·ª£ng t·ªët
      .webp({
        quality: 85, // Ch·∫•t l∆∞·ª£ng 85%
        effort: 6,
        smartSubsample: true,
        reductionEffort: 6
      })
      // L∆∞u file
      .toFile(webpOutputPath);

    console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω: ${relativePath}`);

    // T√≠nh to√°n m·ª©c gi·∫£m k√≠ch th∆∞·ªõc
    const originalSize = fs.statSync(imagePath).size;
    const webpSize = fs.statSync(webpOutputPath).size;
    const compressionRatio = (1 - webpSize / originalSize) * 100;

    console.log(
      `üìä Gi·∫£m ${compressionRatio.toFixed(1)}% k√≠ch th∆∞·ªõc (WebP: ${formatFileSize(webpSize)} | G·ªëc: ${formatFileSize(originalSize)})`
    );
  } catch (error) {
    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω ${relativePath}:`, error.message);
  }
}

// ƒê·ªãnh d·∫°ng k√≠ch th∆∞·ªõc file
function formatFileSize(bytes) {
  if (bytes < 1024) return bytes + ' B';
  if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
  return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
}

// T·∫°o b·∫£ng √°nh x·∫° t√™n file
function createFilenameMap(imageFiles) {
  const filenameMap = {};
  
  for (const imagePath of imageFiles) {
    const originalName = path.parse(imagePath).name;
    const convertedName = convertToNonAccentVietnamese(originalName);
    
    if (originalName !== convertedName) {
      filenameMap[originalName] = convertedName;
    }
  }
  
  return filenameMap;
}

// H√†m ch√≠nh
async function optimizeImages() {
  console.log('üé® B·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a h√¨nh ·∫£nh...');
  console.log(`üìÇ Th∆∞ m·ª•c ngu·ªìn: ${INPUT_DIR}`);
  console.log(`üìÇ Th∆∞ m·ª•c ƒë√≠ch: ${OUTPUT_DIR}`);
  console.log(`‚ÑπÔ∏è ƒê·ªãnh d·∫°ng ƒë·∫ßu ra: ch·ªâ WebP`);

  // Ki·ªÉm tra th∆∞ m·ª•c ƒë·∫ßu v√†o
  if (!fs.existsSync(INPUT_DIR)) {
    console.warn(`‚ö†Ô∏è Th∆∞ m·ª•c ngu·ªìn ${INPUT_DIR} kh√¥ng t·ªìn t·∫°i! ƒêang t·∫°o...`);
    fs.mkdirSync(INPUT_DIR, { recursive: true });
    console.log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c ngu·ªìn. Vui l√≤ng th√™m h√¨nh ·∫£nh v√†o ${INPUT_DIR}`);
    return;
  }

  // T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true });
    console.log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c ƒë√≠ch ${OUTPUT_DIR}`);
  } else {
    console.log(`‚ÑπÔ∏è Th∆∞ m·ª•c ƒë√≠ch ${OUTPUT_DIR} ƒë√£ t·ªìn t·∫°i, s·∫Ω ghi ƒë√® c√°c file khi c·∫ßn thi·∫øt.`);
  }

  // L·∫•y t·∫•t c·∫£ file h√¨nh ·∫£nh
  const imageFiles = getAllImageFiles(INPUT_DIR);

  if (imageFiles.length === 0) {
    console.log('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh n√†o ƒë·ªÉ x·ª≠ l√Ω.');
    return;
  }

  console.log(`üñºÔ∏è T√¨m th·∫•y ${imageFiles.length} h√¨nh ·∫£nh ƒë·ªÉ x·ª≠ l√Ω...`);
  
  // T·∫°o b·∫£ng √°nh x·∫° t√™n file v√† l∆∞u v√†o file n·∫øu c√≥ s·ª± thay ƒë·ªïi t√™n
  const filenameMap = createFilenameMap(imageFiles);
  if (Object.keys(filenameMap).length > 0) {
    console.log('üìù Danh s√°ch t√™n file ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi:');
    for (const [original, converted] of Object.entries(filenameMap)) {
      console.log(`  ‚Ä¢ "${original}" -> "${converted}"`);
    }
    
    // L∆∞u b·∫£ng √°nh x·∫° t√™n file v√†o JSON ƒë·ªÉ tham kh·∫£o sau n√†y
    const mapFilePath = path.join(OUTPUT_DIR, 'filename-map.json');
    
    if (fs.existsSync(mapFilePath)) {
      console.log(`‚ÑπÔ∏è Ghi ƒë√® file √°nh x·∫° t√™n hi·ªán c√≥: ${mapFilePath}`);
    }
    
    fs.writeFileSync(
      mapFilePath, 
      JSON.stringify(filenameMap, null, 2),
      'utf8'
    );
  }

  // X·ª≠ l√Ω t·ª´ng h√¨nh ·∫£nh
  for (const imagePath of imageFiles) {
    await processImage(imagePath);
  }

  console.log('‚ú® Qu√° tr√¨nh t·ªëi ∆∞u h√≥a h√¨nh ·∫£nh ho√†n t·∫•t!');
  console.log('üöÄ C√°c h√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a th√†nh WebP, ƒë·ªïi t√™n v√† sao ch√©p v√†o th∆∞ m·ª•c /static/img');
}

// Ch·∫°y script
(async () => {
  try {
    // Ki·ªÉm tra Sharp ƒë√£ c√†i ƒë·∫∑t
    try {
      require.resolve('sharp');
    } catch (error) {
      console.error('‚ùå Sharp ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng ch·∫°y l·ªánh: npm install sharp --save-dev');
      process.exit(1);
    }

    // B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·ªëi ∆∞u h√≥a
    await optimizeImages();
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
    process.exit(1);
  }
})();