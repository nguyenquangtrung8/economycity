import React, { useState, useEffect } from 'react';
import styles from './Location.module.css';
import { locationData } from './LocationData';

// Fallback data ƒë·ªÉ tr√°nh l·ªói n·∫øu locationData kh√¥ng ƒë∆∞·ª£c import ƒë√∫ng
const defaultData = {
  badge: "V·ªä TR√ç",
  title: "V·ªä TR√ç D·ª∞ √ÅN",
  description: "M√¥ t·∫£ v·ªã tr√≠ d·ª± √°n",
  mapImage: { src: "", alt: "B·∫£n ƒë·ªì v·ªã tr√≠" },
  mapLegend: [],
  connectionsTitle: "K·∫øt n·ªëi",
  connectionGroups: [],
  travelTimes: { title: "Th·ªùi gian di chuy·ªÉn", items: [] }
};

// Mapping gi·ªØa ti√™u ƒë·ªÅ g·ªëc v√† ti√™u ƒë·ªÅ hi·ªÉn th·ªã tr√™n tab
const tabMapping = {
  'Ti·ªán √≠ch n·ªôi khu': 'under1km',
  'Ti·ªán √≠ch ngo·∫°i khu': 'under5km',
  'K·∫øt n·ªëi giao th√¥ng': 'transport'
};

// Mapping ng∆∞·ª£c l·∫°i ƒë·ªÉ hi·ªÉn th·ªã tab
const tabNameMapping = {
  'under1km': 'D∆∞·ªõi 1Km',
  'under5km': 'D∆∞·ªõi 5Km',
  'transport': 'K·∫øt n·ªëi giao th√¥ng'
};

// Custom icon mapping for better UI
const getIconByType = (type, text) => {
  // N·ªôi khu
  if (type === 'under1km') {
    if (text.includes('Clubhouse')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/1998/1998621.png" alt="Clubhouse" />;
    } else if (text.includes('Qu·∫£ng tr∆∞·ªùng')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/2947/2947808.png" alt="Qu·∫£ng tr∆∞·ªùng" />;
    } else if (text.includes('Tr∆∞·ªùng') || text.includes('m·∫ßm non')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/1998/1998621.png" alt="Tr∆∞·ªùng h·ªçc" />;
    } else if (text.includes('C√¥ng vi√™n') || text.includes('c√¢y xanh')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/3069/3069033.png" alt="C√¥ng vi√™n" />;
    } else if (text.includes('H·ªì') || text.includes('ƒëi·ªÅu h√≤a')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/1135/1135560.png" alt="H·ªì ƒëi·ªÅu h√≤a" />;
    } else if (text.includes('th·ªÉ thao')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/2947/2947808.png" alt="Khu th·ªÉ thao" />;
    }
  }
  // Ngo·∫°i khu
  else if (type === 'under5km') {
    if (text.includes('UBND') || text.includes('·ª¶y ban')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/1998/1998621.png" alt="UBND" />;
    } else if (text.includes('TTTM') || text.includes('th∆∞∆°ng m·∫°i')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/2947/2947808.png" alt="TTTM" />;
    } else if (text.includes('KCN') || text.includes('c√¥ng nghi·ªáp')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/3069/3069033.png" alt="KCN" />;
    } else if (text.includes('B·ªánh vi·ªán') || text.includes('Y t·∫ø')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/1998/1998621.png" alt="B·ªánh vi·ªán" />;
    }
  }
  // Giao th√¥ng
  else if (type === 'transport') {
    if (text.includes('Qu·ªëc l·ªô')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/1998/1998621.png" alt="Qu·ªëc l·ªô" />;
    } else if (text.includes('V√†nh ƒëai')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/2947/2947808.png" alt="V√†nh ƒëai" />;
    } else if (text.includes('ƒê∆∞·ªùng s·∫Øt')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/1135/1135560.png" alt="ƒê∆∞·ªùng s·∫Øt" />;
    } else if (text.includes('Cao t·ªëc')) {
      return <img src="https://cdn-icons-png.flaticon.com/512/2947/2947808.png" alt="Cao t·ªëc" />;
    }
  }
  
  // Default icon n·∫øu kh√¥ng c√≥ icon ph√π h·ª£p
  return <img src="https://cdn-icons-png.flaticon.com/512/1946/1946488.png" alt="Location" />;
};

// Travel time icons
const getTravelTimeIcon = (destination) => {
  if (destination.includes("H√† N·ªôi")) {
    return <div className={styles.donutIcon}>üèôÔ∏è</div>;
  } else if (destination.includes("KCN") || destination.includes("c√¥ng nghi·ªáp")) {
    return <div className={styles.donutIcon}>üè≠</div>;
  } else if (destination.includes("S√¢n bay")) {
    return <div className={styles.donutIcon}>‚úàÔ∏è</div>;
  } else if (destination.includes("Park") || destination.includes("th∆∞∆°ng m·∫°i")) {
    return <div className={styles.donutIcon}>üåä</div>;
  }
  
  // Default icon
  return <div className={styles.donutIcon}>üïí</div>;
};

/**
 * Location Component - Hi·ªÉn th·ªã th√¥ng tin v·ªã tr√≠ c·ªßa d·ª± √°n Economy City
 */
const Location = () => {
  // S·ª≠ d·ª•ng default data n·∫øu locationData kh√¥ng t·ªìn t·∫°i ho·∫∑c thi·∫øu thu·ªôc t√≠nh
  const data = {...defaultData, ...locationData};
  
  // State ƒë·ªÉ qu·∫£n l√Ω tab ƒëang ƒë∆∞·ª£c ch·ªçn
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  
  // T·ª± ƒë·ªông chuy·ªÉn tab sau m·ªói 5 gi√¢y
  useEffect(() => {
    const interval = setInterval(() => {
      setActiveTabIndex((prevIndex) => (prevIndex + 1) % data.connectionGroups.length);
    }, 5000);
    
    return () => clearInterval(interval);
  }, [data.connectionGroups.length]);
  
  // L·∫•y n·ªôi dung c·ªßa tab hi·ªán t·∫°i
  const currentTabGroup = data.connectionGroups[activeTabIndex] || { items: [] };
  const currentTabType = tabMapping[currentTabGroup.title] || 'under1km';
  
  return (
    <section id="location" className={styles.location}>
      {/* Header section */}
      <div className={styles.headerContainer}>
        <div className={styles.tagWrapper}>
          <span className={styles.tag}>V·ªä TR√ç CHI·∫æN L∆Ø·ª¢C</span>
        </div>
        <h2 className={styles.heading}>Tr√°i Tim Th√†nh Ph·ªë T∆∞∆°ng Lai</h2>
        <div className={styles.seoDescription}>
          <p className={styles.seoParagraph}>
          Economy City n·∫±m t·∫°i trung t√¢m Nh∆∞ Qu·ª≥nh, VƒÉn L√¢m, H∆∞ng Y√™n, ƒë·ªëi di·ªán Huy·ªán ·ªßy v√† UBND, s·ªü h·ªØu l·ª£i th·∫ø k·∫øt n·ªëi v∆∞·ª£t tr·ªôi. C√°ch H√† N·ªôi 20km, d·ª± √°n k·∫øt n·ªëi qua cao t·ªëc H√† N·ªôi - H·∫£i Ph√≤ng, V√†nh ƒëai 3.5, V√†nh ƒëai 4. V·ªã tr√≠ ƒë·∫Øc ƒë·ªãa mang l·∫°i ti·ªán √≠ch s·ªëng t·ªëi ∆∞u v√† ti·ªÅm nƒÉng ph√°t tri·ªÉn b·ªÅn v·ªØng. D·ª± √°n h·ª©a h·∫πn gia tƒÉng gi√° tr·ªã v∆∞·ª£t b·∫≠c, tr·ªü th√†nh t√¢m ƒëi·ªÉm ƒë·∫ßu t∆∞ khu v·ª±c ph√≠a ƒê√¥ng H√† N·ªôi
          </p>
        </div>
      </div>

      {/* Main content - Kh√¥ng c√≤n container b·ªçc n·ªØa */}
      <div className={styles.mainContentWrapper}>
        {/* C·ªôt b√™n tr√°i: Danh s√°ch k·∫øt n·ªëi */}
        <div className={styles.leftColumn}>
          <h2 className={styles.sectionTitleWithLine}>K·∫øt n·ªëi ƒëa chi·ªÅu, thu·∫≠n ti·ªán di chuy·ªÉn</h2>
          
          {/* Tab Navigation */}
          <div className={styles.tabContainer}>
            <div className={styles.tabHeader}>
              {data.connectionGroups.map((group, index) => (
                <button 
                  key={index}
                  className={`${styles.tabButton} ${activeTabIndex === index ? styles.active : ''}`}
                  onClick={() => setActiveTabIndex(index)}
                >
                  <span className={styles.tabIcon}>
                    {getIconByType(tabMapping[group.title], group.title === 'Ti·ªán √≠ch n·ªôi khu' ? 'Clubhouse' : 
                                  group.title === 'Ti·ªán √≠ch ngo·∫°i khu' ? 'UBND' : 'Qu·ªëc l·ªô')}
                  </span>
                  <span className={styles.tabText}>
                    {tabNameMapping[tabMapping[group.title]] || group.title}
                  </span>
                </button>
              ))}
            </div>
            
            {/* Tab Content */}
            <div className={styles.tabContent}>
              {currentTabGroup.items && currentTabGroup.items.slice(0, 6).map((item, idx) => (
                <div key={idx} className={styles.tabItem}>
                  <div className={styles.tabItemIcon}>
                    {getIconByType(currentTabType, item.text)}
                  </div>
                  {item.text.includes(" ") ? (
                    <>
                      <h3 className={styles.tabItemTitle}>
                        {item.text.split(" ")[0]}
                        {item.text.includes("KCN") && item.text.split(" ")[1] ? " " + item.text.split(" ")[1] : ""}
                      </h3>
                      <p className={styles.tabItemSubtitle}>
                        {item.text.includes("KCN") 
                          ? item.text.split(" ").slice(2).join(" ")
                          : item.text.split(" ").slice(1).join(" ")
                        }
                      </p>
                    </>
                  ) : (
                    <h3 className={styles.tabItemTitle}>{item.text}</h3>
                  )}
                </div>
              ))}
            </div>
            
            {/* Indicator dots */}
            <div className={styles.indicator}>
              {data.connectionGroups.map((_, index) => (
                <div 
                  key={index}
                  className={`${styles.indicatorDot} ${activeTabIndex === index ? styles.active : ''}`}
                  onClick={() => setActiveTabIndex(index)}
                />
              ))}
            </div>
          </div>
        </div>

        {/* C·ªôt b√™n ph·∫£i: B·∫£n ƒë·ªì v√† th·ªùi gian di chuy·ªÉn */}
        <div className={styles.rightColumn}>
          <div className={styles.mapContainer}>
            {data.mapImage && data.mapImage.src ? (
              <img 
                src={data.mapImage.src} 
                alt={data.mapImage.alt || 'B·∫£n ƒë·ªì v·ªã tr√≠'} 
                className={styles.mapImage}
              />
            ) : (
              <p>·∫¢nh b·∫£n ƒë·ªì v·ªã tr√≠ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y</p>
            )}
          </div>
          
          {/* Ph·∫ßn th·ªùi gian di chuy·ªÉn */}
          <div className={styles.footerCharts}>
            {data.travelTimes?.items && data.travelTimes.items.map((item, index) => {
              // T√≠nh ph·∫ßn trƒÉm cho bi·ªÉu ƒë·ªì h√¨nh tr√≤n d·ª±a tr√™n th·ªùi gian
              const timeStr = item.duration.split('-')[1] || item.duration;
              const minutes = parseInt(timeStr.match(/\d+/)[0], 10);
              // Chuy·ªÉn ƒë·ªïi ph√∫t th√†nh ƒë·ªô (360 ƒë·ªô = v√≤ng tr√≤n ƒë·∫ßy ƒë·ªß)
              const degrees = Math.min(360, (minutes / 45) * 360);
              
              return (
                <div key={index} className={styles.donutChart}>
                  <div 
                    className={styles.donutChartContainer}
                    style={{
                      '--progress': `${degrees}deg`
                    }}
                  >
                    <div className={styles.donutHole}>
                      {getTravelTimeIcon(item.destination)}
                    </div>
                  </div>
                  <div className={styles.chartLabel}>{item.destination}</div>
                  <div className={styles.chartTime}>{item.duration}</div>
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {/* N√∫t CTA ·ªü cu·ªëi component, thay th·∫ø ƒë∆∞·ªùng g·∫°ch ngang */}
      <div className={styles.footerCtaContainer}>
        <a href="#contact" className={styles.footerButton}>T√¨m hi·ªÉu th√™m</a>
      </div>
    </section>
  );
};

export default Location;